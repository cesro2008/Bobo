import time import cv2 import numpy as np import serial from gps import gps, WATCH_ENABLE, WATCH_NEWSTYLE import RPi.GPIO as GPIO

Setup GPS

session = gps(mode=WATCH_ENABLE|WATCH_NEWSTYLE)

def get_gps(): try: report = session.next() if report['class'] == 'TPV': return report.lat, report.lon except Exception as e: print("GPS Error:", e) return None, None

Setup Motor Control

MOTOR_LEFT = 17 MOTOR_RIGHT = 18 GPIO.setmode(GPIO.BCM) GPIO.setup(MOTOR_LEFT, GPIO.OUT) GPIO.setup(MOTOR_RIGHT, GPIO.OUT)

def move_forward(): GPIO.output(MOTOR_LEFT, GPIO.HIGH) GPIO.output(MOTOR_RIGHT, GPIO.HIGH)

def stop(): GPIO.output(MOTOR_LEFT, GPIO.LOW) GPIO.output(MOTOR_RIGHT, GPIO.LOW)

Obstacle Detection with OpenCV

cap = cv2.VideoCapture(0)

def detect_obstacle(): ret, frame = cap.read() if not ret: return False gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) edges = cv2.Canny(gray, 50, 150) if np.sum(edges) > 100000:  # Adjust threshold print("Obstacle Detected!") return True return False

AI Navigation Loop

while True: lat, lon = get_gps() print(f"Current GPS: {lat}, {lon}")

if detect_obstacle():
    stop()
    time.sleep(2)
else:
    move_forward()

time.sleep(1)

import time
import cv2
import numpy as np
import serial
import requests
from gps import gps, WATCH_ENABLE, WATCH_NEWSTYLE
import RPi.GPIO as GPIO

# Setup GPS
session = gps(mode=WATCH_ENABLE|WATCH_NEWSTYLE)

# Waypoints for navigation
waypoints = [(37.7749, -122.4194), (37.7750, -122.4184), (37.7751, -122.4174)]
current_waypoint = 0

def get_gps():
    try:
        report = session.next()
        if report['class'] == 'TPV':
            return report.lat, report.lon
    except Exception as e:
        print("GPS Error:", e)
    return None, None

# Setup Motor Control
MOTOR_LEFT = 17
MOTOR_RIGHT = 18
GPIO.setmode(GPIO.BCM)
GPIO.setup(MOTOR_LEFT, GPIO.OUT)
GPIO.setup(MOTOR_RIGHT, GPIO.OUT)

def move_forward():
    GPIO.output(MOTOR_LEFT, GPIO.HIGH)
    GPIO.output(MOTOR_RIGHT, GPIO.HIGH)

def stop():
    GPIO.output(MOTOR_LEFT, GPIO.LOW)
    GPIO.output(MOTOR_RIGHT, GPIO.LOW)

def reached_waypoint(lat, lon, target_lat, target_lon, threshold=0.0001):
    return abs(lat - target_lat) < threshold and abs(lon - target_lon) < threshold

# Obstacle Detection with OpenCV and Ultrasonic Sensor
cap = cv2.VideoCapture(0)
ULTRASONIC_TRIGGER = 23
ULTRASONIC_ECHO = 24
GPIO.setup(ULTRASONIC_TRIGGER, GPIO.OUT)
GPIO.setup(ULTRASONIC_ECHO, GPIO.IN)

def measure_distance():
    GPIO.output(ULTRASONIC_TRIGGER, True)
    time.sleep(0.00001)
    GPIO.output(ULTRASONIC_TRIGGER, False)
    start_time = time.time()
    stop_time = time.time()
    while GPIO.input(ULTRASONIC_ECHO) == 0:
        start_time = time.time()
    while GPIO.input(ULTRASONIC_ECHO) == 1:
        stop_time = time.time()
    time_elapsed = stop_time - start_time
    distance = (time_elapsed * 34300) / 2
    return distance

def detect_obstacle():
    ret, frame = cap.read()
    if not ret:
        return False
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(gray, 50, 150)
    distance = measure_distance()
    if np.sum(edges) > 100000 or distance < 50:  # Adjust threshold
        print("Obstacle Detected!")
        return True
    return False

# Remote Monitoring
REMOTE_SERVER = "http://yourserver.com/update"

def send_data(lat, lon, status):
    try:
        requests.post(REMOTE_SERVER, json={"latitude": lat, "longitude": lon, "status": status})
    except Exception as e:
        print("Error sending data:", e)

# AI Navigation Loop
while current_waypoint < len(waypoints):
    lat, lon = get_gps()
    print(f"Current GPS: {lat}, {lon}")
    send_data(lat, lon, "Navigating")
    
    if lat is None or lon is None:
        continue
    
    target_lat, target_lon = waypoints[current_waypoint]
    if reached_waypoint(lat, lon, target_lat, target_lon):
        print(f"Reached waypoint {current_waypoint+1}")
        send_data(lat, lon, "Waypoint Reached")
        current_waypoint += 1
        stop()
        time.sleep(2)
        continue
    
    if detect_obstacle():
        stop()
        send_data(lat, lon, "Obstacle Detected")
        time.sleep(2)
    else:
        move_forward()
    
    time.sleep(1)

print("All waypoints reached!")
send_data(lat, lon, "Mission Complete")
stop()
